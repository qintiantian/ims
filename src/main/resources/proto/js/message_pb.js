/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CLogin', null, global);
goog.exportSymbol('proto.CLogin.DeviceType', null, global);
goog.exportSymbol('proto.CPrivateChat', null, global);
goog.exportSymbol('proto.CPrivateChat.ChatType', null, global);
goog.exportSymbol('proto.CPrivateChat.DataType', null, global);
goog.exportSymbol('proto.ProtocolMessage', null, global);
goog.exportSymbol('proto.ProtocolMessage.RequestType', null, global);
goog.exportSymbol('proto.ProtocolMessage.TRequest', null, global);
goog.exportSymbol('proto.ProtocolMessage.TResponse', null, global);
goog.exportSymbol('proto.SResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtocolMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtocolMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtocolMessage.displayName = 'proto.ProtocolMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtocolMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtocolMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtocolMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.ProtocolMessage.TRequest.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.ProtocolMessage.TResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtocolMessage}
 */
proto.ProtocolMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtocolMessage;
  return proto.ProtocolMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtocolMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtocolMessage}
 */
proto.ProtocolMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ProtocolMessage.TRequest;
      reader.readMessage(value,proto.ProtocolMessage.TRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.ProtocolMessage.TResponse;
      reader.readMessage(value,proto.ProtocolMessage.TResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtocolMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtocolMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtocolMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ProtocolMessage.TRequest.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ProtocolMessage.TResponse.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ProtocolMessage.RequestType = {
  LOGIN: 0,
  CHAT: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtocolMessage.TRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtocolMessage.TRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtocolMessage.TRequest.displayName = 'proto.ProtocolMessage.TRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtocolMessage.TRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtocolMessage.TRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtocolMessage.TRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolMessage.TRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    login: (f = msg.getLogin()) && proto.CLogin.toObject(includeInstance, f),
    chat: (f = msg.getChat()) && proto.CPrivateChat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtocolMessage.TRequest}
 */
proto.ProtocolMessage.TRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtocolMessage.TRequest;
  return proto.ProtocolMessage.TRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtocolMessage.TRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtocolMessage.TRequest}
 */
proto.ProtocolMessage.TRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtocolMessage.RequestType} */ (reader.readEnum());
      msg.setReqtype(value);
      break;
    case 2:
      var value = new proto.CLogin;
      reader.readMessage(value,proto.CLogin.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 3:
      var value = new proto.CPrivateChat;
      reader.readMessage(value,proto.CPrivateChat.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtocolMessage.TRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtocolMessage.TRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtocolMessage.TRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolMessage.TRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CLogin.serializeBinaryToWriter
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CPrivateChat.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestType reqType = 1;
 * @return {!proto.ProtocolMessage.RequestType}
 */
proto.ProtocolMessage.TRequest.prototype.getReqtype = function() {
  return /** @type {!proto.ProtocolMessage.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ProtocolMessage.RequestType} value */
proto.ProtocolMessage.TRequest.prototype.setReqtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CLogin login = 2;
 * @return {?proto.CLogin}
 */
proto.ProtocolMessage.TRequest.prototype.getLogin = function() {
  return /** @type{?proto.CLogin} */ (
    jspb.Message.getWrapperField(this, proto.CLogin, 2));
};


/** @param {?proto.CLogin|undefined} value */
proto.ProtocolMessage.TRequest.prototype.setLogin = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ProtocolMessage.TRequest.prototype.clearLogin = function() {
  this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtocolMessage.TRequest.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CPrivateChat chat = 3;
 * @return {?proto.CPrivateChat}
 */
proto.ProtocolMessage.TRequest.prototype.getChat = function() {
  return /** @type{?proto.CPrivateChat} */ (
    jspb.Message.getWrapperField(this, proto.CPrivateChat, 3));
};


/** @param {?proto.CPrivateChat|undefined} value */
proto.ProtocolMessage.TRequest.prototype.setChat = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ProtocolMessage.TRequest.prototype.clearChat = function() {
  this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtocolMessage.TRequest.prototype.hasChat = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtocolMessage.TResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtocolMessage.TResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtocolMessage.TResponse.displayName = 'proto.ProtocolMessage.TResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtocolMessage.TResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtocolMessage.TResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtocolMessage.TResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolMessage.TResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resptype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resp: (f = msg.getResp()) && proto.SResponse.toObject(includeInstance, f),
    chat: (f = msg.getChat()) && proto.CPrivateChat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtocolMessage.TResponse}
 */
proto.ProtocolMessage.TResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProtocolMessage.TResponse;
  return proto.ProtocolMessage.TResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtocolMessage.TResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtocolMessage.TResponse}
 */
proto.ProtocolMessage.TResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ProtocolMessage.RequestType} */ (reader.readEnum());
      msg.setResptype(value);
      break;
    case 2:
      var value = new proto.SResponse;
      reader.readMessage(value,proto.SResponse.deserializeBinaryFromReader);
      msg.setResp(value);
      break;
    case 3:
      var value = new proto.CPrivateChat;
      reader.readMessage(value,proto.CPrivateChat.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtocolMessage.TResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProtocolMessage.TResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtocolMessage.TResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtocolMessage.TResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResptype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SResponse.serializeBinaryToWriter
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CPrivateChat.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestType respType = 1;
 * @return {!proto.ProtocolMessage.RequestType}
 */
proto.ProtocolMessage.TResponse.prototype.getResptype = function() {
  return /** @type {!proto.ProtocolMessage.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ProtocolMessage.RequestType} value */
proto.ProtocolMessage.TResponse.prototype.setResptype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SResponse resp = 2;
 * @return {?proto.SResponse}
 */
proto.ProtocolMessage.TResponse.prototype.getResp = function() {
  return /** @type{?proto.SResponse} */ (
    jspb.Message.getWrapperField(this, proto.SResponse, 2));
};


/** @param {?proto.SResponse|undefined} value */
proto.ProtocolMessage.TResponse.prototype.setResp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ProtocolMessage.TResponse.prototype.clearResp = function() {
  this.setResp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtocolMessage.TResponse.prototype.hasResp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CPrivateChat chat = 3;
 * @return {?proto.CPrivateChat}
 */
proto.ProtocolMessage.TResponse.prototype.getChat = function() {
  return /** @type{?proto.CPrivateChat} */ (
    jspb.Message.getWrapperField(this, proto.CPrivateChat, 3));
};


/** @param {?proto.CPrivateChat|undefined} value */
proto.ProtocolMessage.TResponse.prototype.setChat = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ProtocolMessage.TResponse.prototype.clearChat = function() {
  this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtocolMessage.TResponse.prototype.hasChat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TRequest request = 1;
 * @return {?proto.ProtocolMessage.TRequest}
 */
proto.ProtocolMessage.prototype.getRequest = function() {
  return /** @type{?proto.ProtocolMessage.TRequest} */ (
    jspb.Message.getWrapperField(this, proto.ProtocolMessage.TRequest, 1));
};


/** @param {?proto.ProtocolMessage.TRequest|undefined} value */
proto.ProtocolMessage.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ProtocolMessage.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtocolMessage.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TResponse response = 2;
 * @return {?proto.ProtocolMessage.TResponse}
 */
proto.ProtocolMessage.prototype.getResponse = function() {
  return /** @type{?proto.ProtocolMessage.TResponse} */ (
    jspb.Message.getWrapperField(this, proto.ProtocolMessage.TResponse, 2));
};


/** @param {?proto.ProtocolMessage.TResponse|undefined} value */
proto.ProtocolMessage.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ProtocolMessage.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ProtocolMessage.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CPrivateChat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CPrivateChat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CPrivateChat.displayName = 'proto.CPrivateChat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CPrivateChat.prototype.toObject = function(opt_includeInstance) {
  return proto.CPrivateChat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CPrivateChat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CPrivateChat.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    content: msg.getContent_asB64(),
    chattype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    datatype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    seqnum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ts: jspb.Message.getFieldWithDefault(msg, 7, 0),
    msgid: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CPrivateChat}
 */
proto.CPrivateChat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CPrivateChat;
  return proto.CPrivateChat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CPrivateChat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CPrivateChat}
 */
proto.CPrivateChat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    case 4:
      var value = /** @type {!proto.CPrivateChat.ChatType} */ (reader.readEnum());
      msg.setChattype(value);
      break;
    case 5:
      var value = /** @type {!proto.CPrivateChat.DataType} */ (reader.readEnum());
      msg.setDatatype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTs(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CPrivateChat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CPrivateChat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CPrivateChat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CPrivateChat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getChattype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDatatype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTs();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.CPrivateChat.DataType = {
  TXT: 0,
  VOICE: 1,
  VIDEO: 2,
  IMG: 3,
  HYBRID: 4
};

/**
 * @enum {number}
 */
proto.CPrivateChat.ChatType = {
  ONE2ONE: 0,
  ONE2MANY: 1
};

/**
 * optional string userId = 1;
 * @return {string}
 */
proto.CPrivateChat.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CPrivateChat.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destId = 2;
 * @return {string}
 */
proto.CPrivateChat.prototype.getDestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CPrivateChat.prototype.setDestid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.CPrivateChat.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.CPrivateChat.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.CPrivateChat.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value */
proto.CPrivateChat.prototype.setContent = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ChatType chatType = 4;
 * @return {!proto.CPrivateChat.ChatType}
 */
proto.CPrivateChat.prototype.getChattype = function() {
  return /** @type {!proto.CPrivateChat.ChatType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.CPrivateChat.ChatType} value */
proto.CPrivateChat.prototype.setChattype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional DataType dataType = 5;
 * @return {!proto.CPrivateChat.DataType}
 */
proto.CPrivateChat.prototype.getDatatype = function() {
  return /** @type {!proto.CPrivateChat.DataType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.CPrivateChat.DataType} value */
proto.CPrivateChat.prototype.setDatatype = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int32 seqNum = 6;
 * @return {number}
 */
proto.CPrivateChat.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.CPrivateChat.prototype.setSeqnum = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 ts = 7;
 * @return {number}
 */
proto.CPrivateChat.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.CPrivateChat.prototype.setTs = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string msgId = 8;
 * @return {string}
 */
proto.CPrivateChat.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.CPrivateChat.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CLogin.displayName = 'proto.CLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.CLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pwd: jspb.Message.getFieldWithDefault(msg, 3, ""),
    devicetype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ts: jspb.Message.getFieldWithDefault(msg, 5, 0),
    version: jspb.Message.getFieldWithDefault(msg, 6, 0),
    seqnum: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CLogin}
 */
proto.CLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CLogin;
  return proto.CLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CLogin}
 */
proto.CLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPwd(value);
      break;
    case 4:
      var value = /** @type {!proto.CLogin.DeviceType} */ (reader.readEnum());
      msg.setDevicetype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsgid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPwd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDevicetype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTs();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.CLogin.DeviceType = {
  ANDROID: 0,
  IOS: 1,
  WINDOWS: 2,
  MAC: 3
};

/**
 * optional string msgId = 1;
 * @return {string}
 */
proto.CLogin.prototype.getMsgid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CLogin.prototype.setMsgid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.CLogin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CLogin.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string pwd = 3;
 * @return {string}
 */
proto.CLogin.prototype.getPwd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CLogin.prototype.setPwd = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional DeviceType deviceType = 4;
 * @return {!proto.CLogin.DeviceType}
 */
proto.CLogin.prototype.getDevicetype = function() {
  return /** @type {!proto.CLogin.DeviceType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.CLogin.DeviceType} value */
proto.CLogin.prototype.setDevicetype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int64 ts = 5;
 * @return {number}
 */
proto.CLogin.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CLogin.prototype.setTs = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 version = 6;
 * @return {number}
 */
proto.CLogin.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.CLogin.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 seqNum = 7;
 * @return {number}
 */
proto.CLogin.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.CLogin.prototype.setSeqnum = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SResponse.displayName = 'proto.SResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    desc: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SResponse}
 */
proto.SResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SResponse;
  return proto.SResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SResponse}
 */
proto.SResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.SResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SResponse.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string desc = 2;
 * @return {string}
 */
proto.SResponse.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SResponse.prototype.setDesc = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto);
